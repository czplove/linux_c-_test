#include<iostream>
using namespace std;
class Array_max{	// 声明一个类
    private://声明在类的外部不可访问的隐私成员;私有类型数据成员和成员函数（只允许本类中的函数访问，而类外部的任何函数都不能访问）
    	//-只有类中的成员函数可以访问该段的成员
        int array[10];
        int max;
    public://声明在类的外部可以访问的开放的成员函数;共有类型数据成员和成员函数（外部接口）
    	//-类中成员函数、类中的对象、派生类的成员函数及对象都可以访问该段中的成员
    void set_value();//声明函数的原型
    void max_value();
    void show_value();
    //-protected:	//-保护类型数据成员和成员函数（与private类似，差别表现在继承与派生时）
    	//-只有类中成员函数和它的派生类可以访问段中成员
};

/*
构造函数
作用
　　在对象被创建时利用特定的值构造对象，将对象初始化为一个特定的状态，使这个对象有区别于其他对象的特征
特点

1.构造函数名与类名 必须相同
2.没有返回值，也没有函数类型说明
3.类中可以包含多个构造函数，也可以没有
4.复制构造函数可利用已有对象在类中创建一个类中的新对象
5.构造函数由系统自动调用

举个栗子：
class Tree{                
    // ...
    public:                
        Tree() {x = 0; y = 0;}   //声明无参数的构造函数
        Tree(int a, int b)       //声明带两个参数的构造函数
        Tree(float hh) {h = hh;} //声明带一个浮点型参数的构造函数
};
*/

/*
析构函数

作用
　　用来释放一个对象。当一个对象的生存期结束时，系统自动调用析构函数释放它。
特点

1.析构函数的名称必须是 ～类名
2.没有返回值，也没有函数类型说明
3.一个类仅有一个析构函数(如果未定义，系统将自动定义一个空的析构函数)
4.析构函数没有参数

析构函数也是一个成员函数，在取消某个对象时起作用。
*/

/*
类的封装性

　　封装――将数据和操作行为结合起来，构成一个不可分割的整体。 
　　在这个整体中，一些成员是受保护的，不能直接访问，一些成员是公共的，作为对外部的接口。 
用上面栗子来说：

class Tree{                
    private:               
        int height, age;   // 受保护的成员
    public:                
        void getAge();     // 对外的接口
        void print();
};

只能通过public段中的成员函数才能访问private段的成员height和age
*/
